#!/usr/bin/env ruby

require "active_support/core_ext/string/inflections"
require "fileutils"
require "debug"

COMMAND = ARGV.shift
NAME    = ARGV.shift&.downcase

def usage
  puts <<~TEXT
    Usage:
      rails_validation_api install
      rails_validation_api generate [validator_name]
      rails_validation_api destroy  [validator_name]
    Example:
      rails_validation_api generate purchaseorder
      rails_validation_api destroy purchaseorder
  TEXT
end

def check_inflection(name)
  require Rails.root.join('config/initializers/inflections')
  if ActiveSupport::Inflector.inflections.acronyms.key?("api")
    'API'
  else
    'Api'
  end
end

def generate_parameter_validator(name)
  api = check_inflection(name)
  class_name = "#{name.camelize}Validator"
  path = "app/validators/api/validate_parameters/#{name}_validator.rb"

  FileUtils.mkdir_p(File.dirname(path))

  if File.exist?(path)
    puts "⚠️  Validator already exists at #{path}"
  else
    File.write(path, <<~RUBY)
      # frozen_string_literal: true

      class #{api}::ValidateParameters::#{class_name}
        FIELDS_VALIDATES = {
        #  account_id_validate:
        #  {
        #    field: :account_id, type: Integer, opts: [
        #      { required: true, message: "Account id is required" }
        #    ]
        #  }
        }.freeze

        def index
          [
             # FIELDS_VALIDATES[:account_id_validate]
          ]
        end
      end
    RUBY

    puts "✅ Created #{path}"
  end
end

def destroy_validator(name)
  params_path = "app/validators/api/validate_parameters/#{name}_validator.rb"
  path = "app/validators/api/#{name}_validator.rb"

  if File.exist?(path)
    File.delete(path)
    puts "🗑️  Deleted #{path}"
  else
    puts "⚠️  File not found: #{path}"
  end
  if File.exist?(params_path)
    File.delete(params_path)
    puts "🗑️  Deleted #{params_path}"
  else
    puts "⚠️  File not found: #{params_path}"
  end
end

def generate_validator(name)
  api = check_inflection(name)
  class_name = "#{name.camelize}Validator"
  path = "app/validators/api/#{name}_validator.rb"

  FileUtils.mkdir_p(File.dirname(path))

  if File.exist?(path)
    puts "⚠️  Validator already exists at #{path}"
  else
    File.write(path, <<~RUBY)
      # frozen_string_literal: true

      class #{api}::#{class_name}
        def initialize(model_name, account)
          @model_name = model_name
          @account = account
        end

        def index(opts)
        end
      end
    RUBY

    puts "✅ Created #{path}"
  end
end

case COMMAND
when "install"
  puts "🚀 Installing rails_validation_api..."
  generate_validator("application")
when "generate" 
  if NAME.nil?
    puts "❌ Please provide a name. Example: rails_validation_api generate purchaseorder"
  else
    generate_parameter_validator(NAME)
    generate_validator(NAME)
  end
when "destroy" 
  if NAME.nil?
     puts "❌ Please provide a name. Example: rails_validation_api generate purchaseorder"
  else
    destroy_validator(NAME)
  end
else
  usage
end
